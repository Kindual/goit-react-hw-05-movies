{"version":3,"file":"static/js/134.5fee3a3a.chunk.js","mappings":"+SAGMA,EAAM,mCACNC,EAAaC,EAAAA,EAAAA,OAAa,CAC5BC,QAAS,kCAMN,SAAeC,IAAtB,+B,aAAO,O,oBAAA,oGACoBH,EAAWI,IAAX,oCAA4CL,IADhE,cACGM,EADH,yBAEIA,EAASC,KAAKC,SAFlB,kEAQA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAyBC,GAAzB,4FAAgCC,EAAhC,+BAAuC,EAAvC,SACoBV,EAAWI,IAAX,+BAAuCL,EAAvC,gCAAkEW,EAAlE,kBAAgFD,EAAhF,yBADpB,cACGJ,EADH,yBAEIA,EAASC,MAFb,mEASA,SAAeK,EAAtB,kC,aAAO,O,oBAAA,WAAwBC,GAAxB,uFACoBZ,EAAWI,IAAX,gBAAwBQ,EAAxB,oBAA4Cb,EAA5C,oBADpB,cACGM,EADH,yBAEIA,GAFJ,kEAQA,SAAeQ,EAAtB,kC,aAAO,O,oBAAA,WAA+BD,GAA/B,uFACoBZ,EAAWI,IAAX,gBAAwBQ,EAAxB,4BAAoDb,EAApD,oBADpB,cACGM,EADH,yBAEIA,EAASC,KAAKQ,MAFlB,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,4FAAwCF,EAAxC,+BAA+C,EAA/C,SACoBV,EAAWI,IAAX,gBAAwBQ,EAAxB,4BAAoDb,EAApD,gCAA+EW,IADnG,cACGL,EADH,yBAEIA,EAASC,KAAKC,SAFlB,mE,sJCvCA,SAASS,IACZ,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAQC,EAAAA,EAAAA,UACRC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAYF,EAAarB,IAAI,UAAY,IAE/CwB,EAAAA,EAAAA,YAAU,WACFD,IACAP,EAAMS,QAAQC,MAAQH,GACtB,iBAAC,qGAC0BnB,EAAAA,EAAAA,IAAUY,EAAMS,QAAQC,OADlD,OACSzB,EADT,OAEGc,EAAUd,EAASE,SAFtB,0CAAD,GAKP,GAAE,CAACoB,IAEJ,IAAMI,EAAQ,mCAAG,WAAOC,GAAP,8EACbA,EAAEC,iBADW,UAEUzB,EAAAA,EAAAA,IAAUY,EAAMS,QAAQC,OAFlC,OAEPzB,EAFO,OAGbqB,EAAgB,CAAEjB,MAAOW,EAAMS,QAAQC,QACvCX,EAAUd,EAASE,SAJN,2CAAH,sDAOd,OACI,4BACI,kBAAMwB,SAAUA,EAAhB,WACI,kBAAOG,KAAK,OAAOC,KAAK,OAAOC,IAAKhB,KACpC,mBAAQe,KAAK,SAAb,uBAGHjB,EAAOmB,OAAS,GAChB,wBACInB,EAAOoB,KAAI,SAAAC,GAAK,OACb,yBACI,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACI,SAAC,KAAD,CAAMC,GAAE,kBAAaH,EAAMI,IAAMC,MAAO,CAAEC,KAAMvB,GAAhD,SAA8DiB,EAAMO,OAASP,EAAMQ,gBAAkBR,EAAML,MAAQ,mBAFlHK,EAAMI,GADF,MAQnB,KAGb,CAED,W","sources":["Api/Api.jsx","pages/Movies.jsx"],"sourcesContent":["// import React from 'react'\nimport axios from 'axios'\n\nconst KEY = '60b5bf446116d1216ef8df748d38dc14';\nconst axiosMovie = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/'\n})\n\n// popular\n// https://api.themoviedb.org/3/trending/all/day?api_key=<<api_key>>\n\nexport async function getTrending() {\n    const response = await axiosMovie.get(`/trending/all/day?api_key=${KEY}`);\n    return response.data.results;\n  }\n\n// search movies\n// https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false \n\nexport async function getMovies(query, page = 1) {\n    const response = await axiosMovie.get(`search/movie?api_key=${KEY}&language=en-US&page=${page}&query=${query}&include_adult=false`);\n    return response.data\n}\n\n\n// movie details\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US \n\nexport async function getMovie(movie_id) {\n    const response = await axiosMovie.get(`movie/${movie_id}?api_key=${KEY}&language=en-US`);\n    return response\n}\n\n// credits\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n\nexport async function getMovieCredits(movie_id) {\n    const response = await axiosMovie.get(`movie/${movie_id}/credits?api_key=${KEY}&language=en-US`);\n    return response.data.cast\n}\n\n// reviews\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1\n\nexport async function getMovieReview(movie_id, page = 1) {\n    const response = await axiosMovie.get(`movie/${movie_id}/reviews?api_key=${KEY}&language=en-US&page=${page}`);\n    return response.data.results\n}\n\n","import { getMovies } from 'Api/Api';\nimport React, { Suspense, useEffect, useRef, useState } from 'react'\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\n\nexport function Movies() {\n    const [movies, setMovies] = useState([]);\n    const input = useRef()\n    const location = useLocation();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const searchUrl = searchParams.get('query') || '';\n\n    useEffect(() => {\n        if (searchUrl) {\n            input.current.value = searchUrl;\n            (async () => {\n                const response = await getMovies(input.current.value);\n                setMovies(response.results)\n            })()\n        }\n    }, [searchUrl]);\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const response = await getMovies(input.current.value);\n        setSearchParams({ query: input.current.value })\n        setMovies(response.results)\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <input name='name' type=\"text\" ref={input} />\n                <button type='submit'>Search</button>\n            </form>\n\n            {movies.length > 0 ? \n            (<ul>\n                {movies.map(movie =>\n                    <li key={movie.id}>\n                        <Suspense fallback={<div>Loading...</div>}>\n                            <Link to={`/movies/${movie.id}`} state={{ from: location }} >{movie.title || movie.original_title || movie.name || 'name is out'}</Link>\n                        </Suspense>\n                    </li>)\n                }\n            </ul>)\n            : ''}\n        </div>\n    )\n}\n\nexport default Movies;\n"],"names":["KEY","axiosMovie","axios","baseURL","getTrending","get","response","data","results","getMovies","query","page","getMovie","movie_id","getMovieCredits","cast","getMovieReview","Movies","useState","movies","setMovies","input","useRef","location","useLocation","useSearchParams","searchParams","setSearchParams","searchUrl","useEffect","current","value","onSubmit","e","preventDefault","name","type","ref","length","map","movie","Suspense","fallback","to","id","state","from","title","original_title"],"sourceRoot":""}